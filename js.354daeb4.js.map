{"version":3,"sources":["../node_modules/pym.js/dist/pym.v1.js","js/index.js"],"names":["$","selector","document","querySelector","setQueryParams","params","history","replaceState","window","title","toString","getQueryParams","URLSearchParams","location","search","slice","setWidth","width","style","set","debounce","func","timeout","timer","args","clearTimeout","setTimeout","apply","onload","console","log","pym","Parent","hash","has","get","ResizeObserver","entries","contentRect","observe","addEventListener","urlInput","value","origin","pathname","copyButton","select","setSelectionRange","length","execCommand","innerHTML"],"mappings":"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","file":"js.354daeb4.js","sourceRoot":"../build","sourcesContent":["/*! pym.js - v1.3.2 - 2018-02-13 */\n/*\n* Pym.js is library that resizes an iframe based on the width of the parent and the resulting height of the child.\n* Check out the docs at http://blog.apps.npr.org/pym.js/ or the readme at README.md for usage.\n*/\n\n/** @module pym */\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    }\n    else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    } else {\n        window.pym = factory.call(this);\n    }\n})(function() {\n    var MESSAGE_DELIMITER = 'xPYMx';\n\n    var lib = {};\n\n    /**\n    * Create and dispatch a custom pym event\n    *\n    * @method _raiseCustomEvent\n    * @inner\n    *\n    * @param {String} eventName\n    */\n   var _raiseCustomEvent = function(eventName) {\n     var event = document.createEvent('Event');\n     event.initEvent('pym:' + eventName, true, true);\n     document.dispatchEvent(event);\n   };\n\n    /**\n    * Generic function for parsing URL params.\n    * Via http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\n    *\n    * @method _getParameterByName\n    * @inner\n    *\n    * @param {String} name The name of the paramter to get from the URL.\n    */\n    var _getParameterByName = function(name) {\n        var regex = new RegExp(\"[\\\\?&]\" + name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]') + '=([^&#]*)');\n        var results = regex.exec(location.search);\n\n        if (results === null) {\n            return '';\n        }\n\n        return decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    };\n\n    /**\n     * Check the message to make sure it comes from an acceptable xdomain.\n     * Defaults to '*' but can be overriden in config.\n     *\n     * @method _isSafeMessage\n     * @inner\n     *\n     * @param {Event} e The message event.\n     * @param {Object} settings Configuration.\n     */\n    var _isSafeMessage = function(e, settings) {\n        if (settings.xdomain !== '*') {\n            // If origin doesn't match our xdomain, return.\n            if (!e.origin.match(new RegExp(settings.xdomain + '$'))) { return; }\n        }\n\n        // Ignore events that do not carry string data #151\n        if (typeof e.data !== 'string') { return; }\n\n        return true;\n    };\n\n    var _isSafeUrl = function(url) {\n        // Adapted from angular 2 url sanitizer\n        var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/gi;\n        if (!url.match(SAFE_URL_PATTERN)) { return; }\n        \n        return true;\n    };\n\n    /**\n     * Construct a message to send between frames.\n     *\n     * NB: We use string-building here because JSON message passing is\n     * not supported in all browsers.\n     *\n     * @method _makeMessage\n     * @inner\n     *\n     * @param {String} id The unique id of the message recipient.\n     * @param {String} messageType The type of message to send.\n     * @param {String} message The message to send.\n     */\n    var _makeMessage = function(id, messageType, message) {\n        var bits = ['pym', id, messageType, message];\n\n        return bits.join(MESSAGE_DELIMITER);\n    };\n\n    /**\n     * Construct a regex to validate and parse messages.\n     *\n     * @method _makeMessageRegex\n     * @inner\n     *\n     * @param {String} id The unique id of the message recipient.\n     */\n    var _makeMessageRegex = function(id) {\n        var bits = ['pym', id, '(\\\\S+)', '(.*)'];\n\n        return new RegExp('^' + bits.join(MESSAGE_DELIMITER) + '$');\n    };\n\n    /**\n    * Underscore implementation of getNow\n    *\n    * @method _getNow\n    * @inner\n    *\n    */\n    var _getNow = Date.now || function() {\n        return new Date().getTime();\n    };\n\n    /**\n    * Underscore implementation of throttle\n    *\n    * @method _throttle\n    * @inner\n    *\n    * @param {function} func Throttled function\n    * @param {number} wait Throttle wait time\n    * @param {object} options Throttle settings\n    */\n\n    var _throttle = function(func, wait, options) {\n        var context, args, result;\n        var timeout = null;\n        var previous = 0;\n        if (!options) {options = {};}\n        var later = function() {\n            previous = options.leading === false ? 0 : _getNow();\n            timeout = null;\n            result = func.apply(context, args);\n            if (!timeout) {context = args = null;}\n        };\n        return function() {\n            var now = _getNow();\n            if (!previous && options.leading === false) {previous = now;}\n            var remaining = wait - (now - previous);\n            context = this;\n            args = arguments;\n            if (remaining <= 0 || remaining > wait) {\n                if (timeout) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                previous = now;\n                result = func.apply(context, args);\n                if (!timeout) {context = args = null;}\n            } else if (!timeout && options.trailing !== false) {\n                timeout = setTimeout(later, remaining);\n            }\n            return result;\n        };\n    };\n\n    /**\n     * Clean autoInit Instances: those that point to contentless iframes\n     * @method _cleanAutoInitInstances\n     * @inner\n     */\n    var _cleanAutoInitInstances = function() {\n        var length = lib.autoInitInstances.length;\n\n        // Loop backwards to avoid index issues\n        for (var idx = length - 1; idx >= 0; idx--) {\n            var instance = lib.autoInitInstances[idx];\n            // If instance has been removed or is contentless then remove it\n            if (instance.el.getElementsByTagName('iframe').length &&\n                instance.el.getElementsByTagName('iframe')[0].contentWindow) {\n                continue;\n            }\n            else {\n                // Remove the reference to the removed or orphan instance\n                lib.autoInitInstances.splice(idx,1);\n            }\n        }\n    };\n\n    /**\n     * Store auto initialized Pym instances for further reference\n     * @name module:pym#autoInitInstances\n     * @type Array\n     * @default []\n     */\n    lib.autoInitInstances = [];\n\n    /**\n     * Initialize Pym for elements on page that have data-pym attributes.\n     * Expose autoinit in case we need to call it from the outside\n     * @instance\n     * @method autoInit\n     * @param {Boolean} doNotRaiseEvents flag to avoid sending custom events\n     */\n    lib.autoInit = function(doNotRaiseEvents) {\n        var elements = document.querySelectorAll('[data-pym-src]:not([data-pym-auto-initialized])');\n        var length = elements.length;\n\n        // Clean stored instances in case needed\n        _cleanAutoInitInstances();\n        for (var idx = 0; idx < length; ++idx) {\n            var element = elements[idx];\n            /*\n            * Mark automatically-initialized elements so they are not\n            * re-initialized if the user includes pym.js more than once in the\n            * same document.\n            */\n            element.setAttribute('data-pym-auto-initialized', '');\n\n            // Ensure elements have an id\n            if (element.id === '') {\n                element.id = 'pym-' + idx + \"-\" + Math.random().toString(36).substr(2,5);\n            }\n\n            var src = element.getAttribute('data-pym-src');\n\n            // List of data attributes to configure the component\n            // structure: {'attribute name': 'type'}\n            var settings = {'xdomain': 'string', 'title': 'string', 'name': 'string', 'id': 'string',\n                            'sandbox': 'string', 'allowfullscreen': 'boolean',\n                            'parenturlparam': 'string', 'parenturlvalue': 'string',\n                            'optionalparams': 'boolean', 'trackscroll': 'boolean',\n                            'scrollwait': 'number'};\n\n            var config = {};\n\n            for (var attribute in settings) {\n                // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute#Notes\n               if (element.getAttribute('data-pym-'+attribute) !== null) {\n                  switch (settings[attribute]) {\n                    case 'boolean':\n                       config[attribute] = !(element.getAttribute('data-pym-'+attribute) === 'false'); // jshint ignore:line\n                       break;\n                    case 'string':\n                       config[attribute] = element.getAttribute('data-pym-'+attribute);\n                       break;\n                    case 'number':\n                        var n = Number(element.getAttribute('data-pym-'+attribute));\n                        if (!isNaN(n)) {\n                            config[attribute] = n;\n                        }\n                        break;\n                    default:\n                       console.err('unrecognized attribute type');\n                  }\n               }\n            }\n\n            // Store references to autoinitialized pym instances\n            var parent = new lib.Parent(element.id, src, config);\n            lib.autoInitInstances.push(parent);\n        }\n\n        // Fire customEvent\n        if (!doNotRaiseEvents) {\n            _raiseCustomEvent(\"pym-initialized\");\n        }\n        // Return stored autoinitalized pym instances\n        return lib.autoInitInstances;\n    };\n\n    /**\n     * The Parent half of a response iframe.\n     *\n     * @memberof module:pym\n     * @class Parent\n     * @param {String} id The id of the div into which the iframe will be rendered. sets {@link module:pym.Parent~id}\n     * @param {String} url The url of the iframe source. sets {@link module:pym.Parent~url}\n     * @param {Object} [config] Configuration for the parent instance. sets {@link module:pym.Parent~settings}\n     * @param {string} [config.xdomain='*'] - xdomain to validate messages received\n     * @param {string} [config.title] - if passed it will be assigned to the iframe title attribute\n     * @param {string} [config.name] - if passed it will be assigned to the iframe name attribute\n     * @param {string} [config.id] - if passed it will be assigned to the iframe id attribute\n     * @param {boolean} [config.allowfullscreen] - if passed and different than false it will be assigned to the iframe allowfullscreen attribute\n     * @param {string} [config.sandbox] - if passed it will be assigned to the iframe sandbox attribute (we do not validate the syntax so be careful!!)\n     * @param {string} [config.parenturlparam] - if passed it will be override the default parentUrl query string parameter name passed to the iframe src\n     * @param {string} [config.parenturlvalue] - if passed it will be override the default parentUrl query string parameter value passed to the iframe src\n     * @param {string} [config.optionalparams] - if passed and different than false it will strip the querystring params parentUrl and parentTitle passed to the iframe src\n     * @param {boolean} [config.trackscroll] - if passed it will activate scroll tracking on the parent\n     * @param {number} [config.scrollwait] - if passed it will set the throttle wait in order to fire scroll messaging. Defaults to 100 ms.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe iFrame}\n     */\n    lib.Parent = function(id, url, config) {\n        /**\n         * The id of the container element\n         *\n         * @memberof module:pym.Parent\n         * @member {string} id\n         * @inner\n         */\n        this.id = id;\n        /**\n         * The url that will be set as the iframe's src\n         *\n         * @memberof module:pym.Parent\n         * @member {String} url\n         * @inner\n         */\n        this.url = url;\n\n        /**\n         * The container DOM object\n         *\n         * @memberof module:pym.Parent\n         * @member {HTMLElement} el\n         * @inner\n         */\n        this.el = document.getElementById(id);\n        /**\n         * The contained child iframe\n         *\n         * @memberof module:pym.Parent\n         * @member {HTMLElement} iframe\n         * @inner\n         * @default null\n         */\n        this.iframe = null;\n        /**\n         * The parent instance settings, updated by the values passed in the config object\n         *\n         * @memberof module:pym.Parent\n         * @member {Object} settings\n         * @inner\n         */\n        this.settings = {\n            xdomain: '*',\n            optionalparams: true,\n            parenturlparam: 'parentUrl',\n            parenturlvalue: window.location.href,\n            trackscroll: false,\n            scrollwait: 100,\n        };\n        /**\n         * RegularExpression to validate the received messages\n         *\n         * @memberof module:pym.Parent\n         * @member {String} messageRegex\n         * @inner\n         */\n        this.messageRegex = _makeMessageRegex(this.id);\n        /**\n         * Stores the registered messageHandlers for each messageType\n         *\n         * @memberof module:pym.Parent\n         * @member {Object} messageHandlers\n         * @inner\n         */\n        this.messageHandlers = {};\n\n        // ensure a config object\n        config = (config || {});\n\n        /**\n         * Construct the iframe.\n         *\n         * @memberof module:pym.Parent\n         * @method _constructIframe\n         * @inner\n         */\n        this._constructIframe = function() {\n            // Calculate the width of this element.\n            var width = this.el.offsetWidth.toString();\n\n            // Create an iframe element attached to the document.\n            this.iframe = document.createElement('iframe');\n\n            // Save fragment id\n            var hash = '';\n            var hashIndex = this.url.indexOf('#');\n\n            if (hashIndex > -1) {\n                hash = this.url.substring(hashIndex, this.url.length);\n                this.url = this.url.substring(0, hashIndex);\n            }\n\n            // If the URL contains querystring bits, use them.\n            // Otherwise, just create a set of valid params.\n            if (this.url.indexOf('?') < 0) {\n                this.url += '?';\n            } else {\n                this.url += '&';\n            }\n\n            // Append the initial width as a querystring parameter\n            // and optional params if configured to do so\n            this.iframe.src = this.url + 'initialWidth=' + width +\n                                         '&childId=' + this.id;\n\n            if (this.settings.optionalparams) {\n                this.iframe.src += '&parentTitle=' + encodeURIComponent(document.title);\n                this.iframe.src += '&'+ this.settings.parenturlparam + '=' + encodeURIComponent(this.settings.parenturlvalue);\n            }\n            this.iframe.src +=hash;\n\n            // Set some attributes to this proto-iframe.\n            this.iframe.setAttribute('width', '100%');\n            this.iframe.setAttribute('scrolling', 'no');\n            this.iframe.setAttribute('marginheight', '0');\n            this.iframe.setAttribute('frameborder', '0');\n\n            if (this.settings.title) {\n                this.iframe.setAttribute('title', this.settings.title);\n            }\n\n            if (this.settings.allowfullscreen !== undefined && this.settings.allowfullscreen !== false) {\n                this.iframe.setAttribute('allowfullscreen','');\n            }\n\n            if (this.settings.sandbox !== undefined && typeof this.settings.sandbox === 'string') {\n                this.iframe.setAttribute('sandbox', this.settings.sandbox);\n            }\n\n            if (this.settings.id) {\n                if (!document.getElementById(this.settings.id)) {\n                    this.iframe.setAttribute('id', this.settings.id);\n                }\n            }\n\n            if (this.settings.name) {\n                this.iframe.setAttribute('name', this.settings.name);\n            }\n\n            // Replace the child content if needed\n            // (some CMSs might strip out empty elements)\n            while(this.el.firstChild) { this.el.removeChild(this.el.firstChild); }\n            // Append the iframe to our element.\n            this.el.appendChild(this.iframe);\n\n            // Add an event listener that will handle redrawing the child on resize.\n            window.addEventListener('resize', this._onResize);\n\n            // Add an event listener that will send the child the viewport.\n            if (this.settings.trackscroll) {\n                window.addEventListener('scroll', this._throttleOnScroll);\n            }\n        };\n\n        /**\n         * Send width on resize.\n         *\n         * @memberof module:pym.Parent\n         * @method _onResize\n         * @inner\n         */\n        this._onResize = function() {\n            this.sendWidth();\n            if (this.settings.trackscroll) {\n                this.sendViewportAndIFramePosition();\n            }\n        }.bind(this);\n\n        /**\n         * Send viewport and iframe info on scroll.\n         *\n         * @memberof module:pym.Parent\n         * @method _onScroll\n         * @inner\n         */\n        this._onScroll = function() {\n            this.sendViewportAndIFramePosition();\n        }.bind(this);\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof module:pym.Parent\n         * @method _fire\n         * @inner\n         *\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Remove this parent from the page and unbind it's event handlers.\n         *\n         * @memberof module:pym.Parent\n         * @method remove\n         * @instance\n         */\n        this.remove = function() {\n            window.removeEventListener('message', this._processMessage);\n            window.removeEventListener('resize', this._onResize);\n\n            this.el.removeChild(this.iframe);\n            // _cleanAutoInitInstances in case this parent was autoInitialized\n            _cleanAutoInitInstances();\n        };\n\n        /**\n         * Process a new message from the child.\n         *\n         * @memberof module:pym.Parent\n         * @method _processMessage\n         * @inner\n         *\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Grab the message from the child and parse it.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or too many matches in the message, punt.\n            if (!match || match.length !== 3) {\n                return false;\n            }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new height message from child.\n         *\n         * @memberof module:pym.Parent\n         * @method _onHeightMessage\n         * @inner\n         *\n         * @param {String} message The new height.\n         */\n        this._onHeightMessage = function(message) {\n            /*\n             * Handle parent height message from child.\n             */\n            var height = parseInt(message);\n\n            this.iframe.setAttribute('height', height + 'px');\n        };\n\n        /**\n         * Navigate parent to a new url.\n         *\n         * @memberof module:pym.Parent\n         * @method _onNavigateToMessage\n         * @inner\n         *\n         * @param {String} message The url to navigate to.\n         */\n        this._onNavigateToMessage = function(message) {\n            /*\n             * Handle parent scroll message from child.\n             */\n             if (!_isSafeUrl(message)) {return;}\n            document.location.href = message;\n        };\n\n        /**\n         * Scroll parent to a given child position.\n         *\n         * @memberof module:pym.Parent\n         * @method _onScrollToChildPosMessage\n         * @inner\n         *\n         * @param {String} message The offset inside the child page.\n         */\n        this._onScrollToChildPosMessage = function(message) {\n            // Get the child container position using getBoundingClientRect + pageYOffset\n            // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n            var iframePos = document.getElementById(this.id).getBoundingClientRect().top + window.pageYOffset;\n\n            var totalOffset = iframePos + parseInt(message);\n            window.scrollTo(0, totalOffset);\n        };\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"height\", \"scrollTo\" and \"navigateTo\".\n         *\n         * @memberof module:pym.Parent\n         * @method onMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message being listened for.\n         * @param {module:pym.Parent~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * @callback module:pym.Parent~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n        /**\n         * Send a message to the the child.\n         *\n         * @memberof module:pym.Parent\n         * @method sendMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            // When used alongside with pjax some references are lost\n            if (this.el.getElementsByTagName('iframe').length) {\n                if (this.el.getElementsByTagName('iframe')[0].contentWindow) {\n                    this.el.getElementsByTagName('iframe')[0].contentWindow\n                        .postMessage(_makeMessage(this.id, messageType, message), '*');\n                }\n                else {\n                    // Contentless child detected remove listeners and iframe\n                    this.remove();\n                }\n            }\n        };\n\n        /**\n         * Transmit the current iframe width to the child.\n         *\n         * You shouldn't need to call this directly.\n         *\n         * @memberof module:pym.Parent\n         * @method sendWidth\n         * @instance\n         */\n        this.sendWidth = function() {\n            var width = this.el.offsetWidth.toString();\n            this.sendMessage('width', width);\n        };\n\n        /**\n         * Transmit the current viewport and iframe position to the child.\n         * Sends viewport width, viewport height\n         * and iframe bounding rect top-left-bottom-right\n         * all separated by spaces\n         *\n         * You shouldn't need to call this directly.\n         *\n         * @memberof module:pym.Parent\n         * @method sendViewportAndIFramePosition\n         * @instance\n         */\n        this.sendViewportAndIFramePosition = function() {\n            var iframeRect = this.iframe.getBoundingClientRect();\n            var vWidth   = window.innerWidth || document.documentElement.clientWidth;\n            var vHeight  = window.innerHeight || document.documentElement.clientHeight;\n            var payload = vWidth + ' ' + vHeight;\n            payload += ' ' + iframeRect.top + ' ' + iframeRect.left;\n            payload += ' ' + iframeRect.bottom + ' ' + iframeRect.right;\n            this.sendMessage('viewport-iframe-position', payload);\n        };\n\n        // Add any overrides to settings coming from config.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        /**\n         * Throttled scroll function.\n         *\n         * @memberof module:pym.Parent\n         * @method _throttleOnScroll\n         * @inner\n         */\n        this._throttleOnScroll = _throttle(this._onScroll.bind(this), this.settings.scrollwait);\n\n        // Bind required message handlers\n        this.onMessage('height', this._onHeightMessage);\n        this.onMessage('navigateTo', this._onNavigateToMessage);\n        this.onMessage('scrollToChildPos', this._onScrollToChildPosMessage);\n        this.onMessage('parentPositionInfo', this.sendViewportAndIFramePosition);\n\n        // Add a listener for processing messages from the child.\n        window.addEventListener('message', this._processMessage, false);\n\n        // Construct the iframe in the container element.\n        this._constructIframe();\n\n        return this;\n    };\n\n    /**\n     * The Child half of a responsive iframe.\n     *\n     * @memberof module:pym\n     * @class Child\n     * @param {Object} [config] Configuration for the child instance. sets {@link module:pym.Child~settings}\n     * @param {function} [config.renderCallback=null] Callback invoked after receiving a resize event from the parent, sets {@link module:pym.Child#settings.renderCallback}\n     * @param {string} [config.xdomain='*'] - xdomain to validate messages received\n     * @param {number} [config.polling=0] - polling frequency in milliseconds to send height to parent\n     * @param {number} [config.id] - parent container id used when navigating the child iframe to a new page but we want to keep it responsive.\n     * @param {string} [config.parenturlparam] - if passed it will be override the default parentUrl query string parameter name expected on the iframe src\n     */\n    lib.Child = function(config) {\n        /**\n         * The initial width of the parent page\n         *\n         * @memberof module:pym.Child\n         * @member {string} parentWidth\n         * @inner\n         */\n        this.parentWidth = null;\n        /**\n         * The id of the parent container\n         *\n         * @memberof module:pym.Child\n         * @member {String} id\n         * @inner\n         */\n        this.id = null;\n        /**\n         * The title of the parent page from document.title.\n         *\n         * @memberof module:pym.Child\n         * @member {String} parentTitle\n         * @inner\n         */\n        this.parentTitle = null;\n        /**\n         * The URL of the parent page from window.location.href.\n         *\n         * @memberof module:pym.Child\n         * @member {String} parentUrl\n         * @inner\n         */\n        this.parentUrl = null;\n        /**\n         * The settings for the child instance. Can be overriden by passing a config object to the child constructor\n         * i.e.: var pymChild = new pym.Child({renderCallback: render, xdomain: \"\\\\*\\.npr\\.org\"})\n         *\n         * @memberof module:pym.Child.settings\n         * @member {Object} settings - default settings for the child instance\n         * @inner\n         */\n        this.settings = {\n            renderCallback: null,\n            xdomain: '*',\n            polling: 0,\n            parenturlparam: 'parentUrl'\n        };\n\n        /**\n         * The timerId in order to be able to stop when polling is enabled\n         *\n         * @memberof module:pym.Child\n         * @member {String} timerId\n         * @inner\n         */\n        this.timerId = null;\n        /**\n         * RegularExpression to validate the received messages\n         *\n         * @memberof module:pym.Child\n         * @member {String} messageRegex\n         * @inner\n         */\n        this.messageRegex = null;\n        /**\n         * Stores the registered messageHandlers for each messageType\n         *\n         * @memberof module:pym.Child\n         * @member {Object} messageHandlers\n         * @inner\n         */\n        this.messageHandlers = {};\n\n        // Ensure a config object\n        config = (config || {});\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"width\".\n         *\n         * @memberof module:pym.Child\n         * @method onMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message being listened for.\n         * @param {module:pym.Child~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * @callback module:pym.Child~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof module:pym.Child\n         * @method _fire\n         * @inner\n         *\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            /*\n             * Fire all event handlers for a given message type.\n             */\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Process a new message from the parent.\n         *\n         * @memberof module:pym.Child\n         * @method _processMessage\n         * @inner\n         *\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            /*\n            * Process a new message from parent frame.\n            */\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Get the message from the parent.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or it's a bad format, punt.\n            if (!match || match.length !== 3) { return; }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new width message from parent.\n         *\n         * @memberof module:pym.Child\n         * @method _onWidthMessage\n         * @inner\n         *\n         * @param {String} message The new width.\n         */\n        this._onWidthMessage = function(message) {\n            /*\n             * Handle width message from the child.\n             */\n            var width = parseInt(message);\n\n            // Change the width if it's different.\n            if (width !== this.parentWidth) {\n                this.parentWidth = width;\n\n                // Call the callback function if it exists.\n                if (this.settings.renderCallback) {\n                    this.settings.renderCallback(width);\n                }\n\n                // Send the height back to the parent.\n                this.sendHeight();\n            }\n        };\n\n        /**\n         * Send a message to the the Parent.\n         *\n         * @memberof module:pym.Child\n         * @method sendMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            /*\n             * Send a message to the parent.\n             */\n            window.parent.postMessage(_makeMessage(this.id, messageType, message), '*');\n        };\n\n        /**\n         * Transmit the current iframe height to the parent.\n         *\n         * Call this directly in cases where you manually alter the height of the iframe contents.\n         *\n         * @memberof module:pym.Child\n         * @method sendHeight\n         * @instance\n         */\n        this.sendHeight = function() {\n            // Get the child's height.\n            var height = document.getElementsByTagName('body')[0].offsetHeight.toString();\n\n            // Send the height to the parent.\n            this.sendMessage('height', height);\n\n            return height;\n        }.bind(this);\n\n        /**\n         * Ask parent to send the current viewport and iframe position information\n         *\n         * @memberof module:pym.Child\n         * @method sendHeight\n         * @instance\n         */\n        this.getParentPositionInfo = function() {\n            // Send the height to the parent.\n            this.sendMessage('parentPositionInfo');\n        };\n\n        /**\n         * Scroll parent to a given element id.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentTo\n         * @instance\n         *\n         * @param {String} hash The id of the element to scroll to.\n         */\n        this.scrollParentTo = function(hash) {\n            this.sendMessage('navigateTo', '#' + hash);\n        };\n\n        /**\n         * Navigate parent to a given url.\n         *\n         * @memberof module:pym.Child\n         * @method navigateParentTo\n         * @instance\n         *\n         * @param {String} url The url to navigate to.\n         */\n        this.navigateParentTo = function(url) {\n            this.sendMessage('navigateTo', url);\n        };\n\n        /**\n         * Scroll parent to a given child element id.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentToChildEl\n         * @instance\n         *\n         * @param {String} id The id of the child element to scroll to.\n         */\n        this.scrollParentToChildEl = function(id) {\n            // Get the child element position using getBoundingClientRect + pageYOffset\n            // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n            var topPos = document.getElementById(id).getBoundingClientRect().top + window.pageYOffset;\n            this.scrollParentToChildPos(topPos);\n        };\n\n        /**\n         * Scroll parent to a particular child offset.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentToChildPos\n         * @instance\n         *\n         * @param {Number} pos The offset of the child element to scroll to.\n         */\n        this.scrollParentToChildPos = function(pos) {\n            this.sendMessage('scrollToChildPos', pos.toString());\n        };\n\n        /**\n         * Mark Whether the child is embedded or not\n         * executes a callback in case it was passed to the config\n         *\n         * @memberof module:pym.Child\n         * @method _markWhetherEmbedded\n         * @inner\n         *\n         * @param {module:pym.Child~onMarkedEmbeddedStatus} The callback to execute after determining whether embedded or not.\n         */\n        var _markWhetherEmbedded = function(onMarkedEmbeddedStatus) {\n          var htmlElement = document.getElementsByTagName('html')[0],\n              newClassForHtml,\n              originalHtmlClasses = htmlElement.className;\n          try {\n            if(window.self !== window.top) {\n              newClassForHtml = \"embedded\";\n            }else{\n              newClassForHtml = \"not-embedded\";\n            }\n          }catch(e) {\n            newClassForHtml = \"embedded\";\n          }\n          if(originalHtmlClasses.indexOf(newClassForHtml) < 0) {\n            htmlElement.className = originalHtmlClasses ? originalHtmlClasses + ' ' + newClassForHtml : newClassForHtml;\n            if(onMarkedEmbeddedStatus){\n              onMarkedEmbeddedStatus(newClassForHtml);\n            }\n            _raiseCustomEvent(\"marked-embedded\");\n          }\n        };\n\n        /**\n         * @callback module:pym.Child~onMarkedEmbeddedStatus\n         * @param {String} classname \"embedded\" or \"not-embedded\".\n         */\n\n        /**\n         * Unbind child event handlers and timers.\n         *\n         * @memberof module:pym.Child\n         * @method remove\n         * @instance\n         */\n        this.remove = function() {\n            window.removeEventListener('message', this._processMessage);\n            if (this.timerId) {\n                clearInterval(this.timerId);\n            }\n        };\n\n        // Initialize settings with overrides.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        // Identify what ID the parent knows this child as.\n        this.id = _getParameterByName('childId') || config.id;\n        this.messageRegex = new RegExp('^pym' + MESSAGE_DELIMITER + this.id + MESSAGE_DELIMITER + '(\\\\S+)' + MESSAGE_DELIMITER + '(.*)$');\n\n        // Get the initial width from a URL parameter.\n        var width = parseInt(_getParameterByName('initialWidth'));\n\n        // Get the url of the parent frame\n        this.parentUrl = _getParameterByName(this.settings.parenturlparam);\n\n        // Get the title of the parent frame\n        this.parentTitle = _getParameterByName('parentTitle');\n\n        // Bind the required message handlers\n        this.onMessage('width', this._onWidthMessage);\n\n        // Set up a listener to handle any incoming messages.\n        window.addEventListener('message', this._processMessage, false);\n\n        // If there's a callback function, call it.\n        if (this.settings.renderCallback) {\n            this.settings.renderCallback(width);\n        }\n\n        // Send the initial height to the parent.\n        this.sendHeight();\n\n        // If we're configured to poll, create a setInterval to handle that.\n        if (this.settings.polling) {\n            this.timerId = window.setInterval(this.sendHeight, this.settings.polling);\n        }\n\n        _markWhetherEmbedded(config.onMarkedEmbeddedStatus);\n\n        return this;\n    };\n\n    // Initialize elements with pym data attributes\n    // if we are not in server configuration\n    if(typeof document !== \"undefined\") {\n        lib.autoInit(true);\n    }\n\n    return lib;\n});\n\n","import pym from \"pym.js\";\n\nconst $ = selector => document.querySelector(selector);\n\nconst setQueryParams = params => {\n  history.replaceState(null, window.title, `?${params.toString()}`);\n};\n\nconst getQueryParams = () => new URLSearchParams(location.search.slice(1));\n\nconst setWidth = width => {\n  $(\"#graphic\").style.width = `${width}px`;\n  const params = getQueryParams();\n  params.set(\"width\", width);\n  setQueryParams(params);\n};\n\n// https://www.freecodecamp.org/news/javascript-debounce-example/\nfunction debounce(func, timeout = 300) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n\nwindow.onload = () => {\n  console.log(\"The Michigan Daily graphics preview\");\n  new pym.Parent(\"graphic\", \"./graphic/index.html\", {});\n\n  // Set the width on load if exists\n  if (location.hash) {\n    const params = getQueryParams();\n    if (params.has(\"width\")) {\n      setWidth(params.get(\"width\"));\n    }\n  }\n\n  const resizeObserver = new ResizeObserver(\n    debounce(entries => {\n      const width = entries[0].contentRect.width;\n      setWidth(width);\n    })\n  );\n  resizeObserver.observe($(\"#graphic\"));\n\n  $(\"#desktop-preview\").addEventListener(\"click\", () => { setWidth(780); });\n  $(\"#small-mobile-preview\").addEventListener(\"click\", () => { setWidth(288); });\n  $(\"#large-mobile-preview\").addEventListener(\"click\", () => { setWidth(338); });\n\n  const urlInput = $(\"#url-input\");\n  urlInput.value = `${window.location.origin + window.location.pathname}graphic/index.html`;\n\n  const copyButton = $(\"#copy-url-button\");\n\n  copyButton.addEventListener(\"click\", () => {\n    urlInput.select();\n    urlInput.setSelectionRange(0, urlInput.value.length);\n    document.execCommand(\"copy\");\n    copyButton.innerHTML = \"Copied!\";\n  });\n};\n"]}